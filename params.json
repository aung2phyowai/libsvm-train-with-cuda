{"name":"Libsvm-train-with-cuda","tagline":"Automatically exported from code.google.com/p/libsvm-train-with-cuda","body":"svm-train with CUDA\r\n\r\nBase on libsvm-3.18. Two bottleneck functions are rewritten with CUDA support. Modify the original implement as less as possible, as you can see:\r\n                CUDA_k_function(model->SV, l, model->param, x, kvalue);\r\n/*\r\n                // Verify the result\r\n                float val;\r\n                if( (float)kvalue[i]!=(val=Kernel::k_function(x,model->SV[i],model->param)) )\r\n                        printf(\"CUDA_k_function result not match %d, %f != %f\\n\", i, kvalue[i], val);\r\n*/\r\n/*\r\n                // original implement\r\n#pragma omp parallel for private(i)\r\n                for(i=0;i<l;i++)\r\n                        kvalue[i] = Kernel::k_function(x,model->SV[i],model->param);\r\n*/\r\nTested in Linux ONLY.\r\nsvm-train ONLY, svm-predict is not supported yet.\r\nsvm_type support C-SVC(default value of libsvm) ONLY.\r\nprobability_estimates (-b 1) is SUPPORTED.\r\nkernel_type tested with \"radial basis function\"(default value of libsvm) ONLY. The other kernel_type SHOULD be OK, but not tested.\r\n-h 0 is a MUST.\r\nSo you should run svm-train like this:\r\nsvm-train -h 0 -s 0 -t 2 .....\r\nor\r\nsvm-train -h 0 -s 0 -t 2 -b 1.....","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}